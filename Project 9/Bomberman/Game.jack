class Game {

	field int xMax, xMin, yMax, yMin, x, y, memAddress, count;
	field booleab plant;
	field Character character;
	field Bomb bomb;

	constructor Game new(int AxMax, int AxMin, int AyMax, int AyMin) {	
		let character = Character.new(15, 125);
		let bomb = Bomb.new();
		let xMax = AxMax;
		let xMin = AxMin;
		let yMax = AyMax;
		let yMin = AyMin;
		let plant = false;
		let count = 0;
		do drawScenario();		
		do Screen.setColor(true);
		return this;
	}

	method void dispose() {
		do character.dispose();
		do Memory.deAlloc(this);
		return;
	}

	method void drawBrick(int location) {
		let memAddress = 16384+location;
		do Memory.poke(memAddress+0, -1);
		do Memory.poke(memAddress+32, -32735);
		do Memory.poke(memAddress+64, -32735);
		do Memory.poke(memAddress+96, -32735);
		do Memory.poke(memAddress+128, -32735);
		do Memory.poke(memAddress+160, -1);
		do Memory.poke(memAddress+192, -31743);
		do Memory.poke(memAddress+224, -31743);
		do Memory.poke(memAddress+256, -31743);
		do Memory.poke(memAddress+288, -31743);
		do Memory.poke(memAddress+320, -1);
		do Memory.poke(memAddress+352, -32735);
		do Memory.poke(memAddress+384, -32735);
		do Memory.poke(memAddress+416, -32735);
		do Memory.poke(memAddress+448, -32735);
		do Memory.poke(memAddress+480, -1);
		return;
	}

	method void drawScenario() {
		var int count;
		let count = xMin;
		while (count < xMax) {
			do drawBrick(count+(32*yMin));
			let count = count+1;
		}

		let count = xMin;
		while (count < (xMax+1)) {
			do drawBrick(count+(32*yMax));
			let count = count+1;
		}

		let count = yMin;
		while (count < yMax) {
			do drawBrick(xMin+(32*count));
			let count = count+16;
		}

		let count = yMin;
		while (count < yMax) {
			do drawBrick(xMax+(32*count));
			let count = count+16;
		}
		return;
	}

	method void moveCharacter(int direction) {
		if (direction = 1) { if (character.getCurrentY() > (yMin+16)) { do character.moveUp(); } }
		if (direction = 2) { if (character.getCurrentY() < (yMax-32)) { do character.moveDown(); } }
		if (direction = 3) { if (character.getCurrentX() > (xMin+1)) { do character.moveLeft(); } }
		if (direction = 4) { if (character.getCurrentX() < (xMax-1)) { do character.moveRight(); } }
		do Sys.wait(80);  // delays the next movement
		return;
	}

	method void run() {
		var char key;  // the key currently pressed by the user
		var int bombX, bombY;
		var boolean exit;
		let exit = false;
      
		while (~exit) {
			let key = Keyboard.keyPressed();
			if (key = 81)  { let exit = true; }     // q key
			//if (key = 90)  { do square.decSize(); } // z key
			if (key = 88)  { if (plant = false) { let bombX = character.getCurrentX()*16+8; let bombY = character.getCurrentY()+8; let count = 0; let plant = true; } } // x key
			if (key = 131) { do moveCharacter(1); }   // up arrow
			if (key = 133) { do moveCharacter(2); }   // down arrow
			if (key = 130) { do moveCharacter(3); }   // left arrow
			if (key = 132) { do moveCharacter(4); }   // right arrow
			let count = count + 1;
			do bomb.plant(bombX, bombY, count, plant);
			if (count = 10000) { let plant = false; }
		} // while
		return;
	}
}